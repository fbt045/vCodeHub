#!/usr/bin/expect
#
# Copyright (C) 2013, Vector Li (idorax@126.com)
#

#
# vlogin - login remote host via ssh for working smart
#          It will copy itself to remote host for next vlogin and remove the
#          copy from remote when exit, which is very helpful when we ssh to
#          pit's gateway then access pit's machines
#
# TODO Next: enable to a box copying files from remote machine to local or
#          public directory because sometimes we want to copy something if
#          connection is done. Need to modify trap ... after login,
#          e.g.
#          --- puts $fd "trap 'cd /tmp && rm -rf $::dst_tmpdir' EXIT"
#          +++ puts $fd "trap 'cd /tmp && rm -rf $::dst_tmpdir && scp ...' EXIT"
#
#          or file a script say $::dst_tmpdir/fooooo
#          # fooooo
#          scp ... ...
#          cd /tmp && rm -rf $dst_tmpdir
#          puts $fd "trap 'bash $::dst_tmpdir/fooooo' EXIT"
#

set g_name "[lindex [split $argv0 /] end]"
set g_desc "Light utility to login remote host via ssh for you"
set g_vers "1.7"
set g_auth "Vector <idorax@126.com>"
set g_date "02/07/2013"
set g_memo1a "If you hate to input the default password(s),"
set g_memo1b "please never hesitate to have a try!!"


################################################################################
# Global variables
################################################################################
set B_TRUE  1
set B_FALSE 0

set DEF_TIMEOUT 120

set ENV_ISATTY "VLOGIN_ISATTY"
set ENV_BASHRC "VLOGIN_BASHRC"
set ENV_BOX    "VLOGIN_BOX"
set DEF_ISATTY "YES"
set DEF_BASHRC "/your/bashrc"                         ;# for usage
set DEF_BOX    "/var/tmp/box.tar.gz or /var/tmp/ibox" ;# for usage

set DEFAULT_USER      "root"
set DEFAULT_PASSWORDS {passwd1 passw2}

################################################################################
# Public functions
################################################################################

#
# get env value, if not found, return ""
#
proc getenv {name} {
	if {[catch {set val $::env($name)}]} {
		set val ""
	}
	return $val
}

#
# set env, the same as export in bash/ksh
#
proc setenv {name value} {
	array set ::env [list $name $value]
}

#
# dump all env
#
proc dumpenv {} {
	foreach i [array names ::env] {
		puts "_ENV_: $i=$::env($i)"
	}
}

#
# bogus isatty as *I have no idea how to detect isatty() in Tcl yet*
#
proc isatty {} {
	set s [string toupper [getenv $::ENV_ISATTY]]
	if {$s == "YES"} {
		return $::B_TRUE
	}
	return $::B_FALSE
}

#
# str2<color> : {gray, red, green, yellow, blue, magenta, cyan, white}
#
proc str2gray {s} {
	if {[isatty]} {
		return "\033\[1;30m$s\033\[0m"
	}
	return $s
}
proc str2red {s} {
	if {[isatty]} {
		return "\033\[1;31m$s\033\[0m"
	}
	return $s
}

proc str2green {s} {
	if {[isatty]} {
		return "\033\[1;32m$s\033\[0m"
	}
	return $s
}
proc str2yellow {s} {
	if {[isatty]} {
		return "\033\[1;33m$s\033\[0m"
	}
	return $s
}
proc str2blue {s} {
	if {[isatty]} {
		return "\033\[1;34m$s\033\[0m"
	}
	return $s
}
proc str2magenta {s} {
	if {[isatty]} {
		return "\033\[1;35m$s\033\[0m"
	}
	return $s
}
proc str2cyan {s} {
	if {[isatty]} {
		return "\033\[1;36m$s\033\[0m"
	}
	return $s
}
proc str2white {s} {
	if {[isatty]} {
		return "\033\[1;37m$s\033\[0m"
	}
	return $s
}

#
# msg_* : {fail, pass, warn, info}
#
proc msg_fail {s} { puts stderr [str2red     "\[ FAIL \] $s"]; }
proc msg_pass {s} { puts stdout [str2cyan    "\[ PASS \] $s"]; }
proc msg_warn {s} { puts stderr [str2magenta "\[ WARN \] $s"]; }
proc msg_info {s} { puts stderr [str2green   "\[ INFO \] $s"]; }

# get nchars like python c * n, e.g. "#" * 3 == "###"
proc str_cxn  {c n} { return [string repeat $c $n]; }

# str{L|M|R} <char> <width> <string>
proc strL {c w s} { return [_strX "L" $c $w $s]; }
proc strM {c w s} { return [_strX "M" $c $w $s]; }
proc strR {c w s} { return [_strX "R" $c $w $s]; }
proc _strX {align char width s} {
	set sz [string length $s]
	set n  [expr {$width - $sz}]
	if {$align == "L"} {
		set s1 "$s[str_cxn $char $n]"
	} elseif {$align == "R"} {
		set s1 "[str_cxn $char $n]$s"
	} elseif {$align == "M"} {
		set n [expr {$n / 2}]
		set s1 "[str_cxn $char $n]$s"
		set sz [string length $s1]
		set n [expr {$width - $sz}]
		set s1 "$s1[str_cxn $char $n]"
	} else {
		set s1 $s
	}

	return $s1
}

#
# get a random integer between m and M
#
proc random {m M} {
	return [expr $m + round(rand() * ($M - $m))]
}


################################################################################
# Private functions
################################################################################

#
# add extra alias/env to bashrc for vlogin itself
#
proc bashrc_extra {f_bashrc} {
	set fd [open $f_bashrc "a+"]

	set s0 [str_cxn "#" 80]
	puts $fd "\n#\n$s0\n# EXTRA STUFF ADDED BY $::argv0\n$s0\n#" ;# head

	puts $fd "alias vlogin=$::dst_vlogin"
	puts $fd "trap 'cd /tmp && rm -rf $::dst_tmpdir' EXIT"
	puts $fd "export $::ENV_BASHRC=$::dst_bashrc"
	puts $fd "alias up='cd /tmp'"
	puts $fd "alias dw='cd $::dst_tmpdir'"

	# set env/alias for user's box
	if {[getenv $::ENV_BOX] != ""} {
		puts $fd "export $::ENV_BOX=$::dst_box"

		# add alias "box" if user has box_bashrc
		set cb_bashrc "box_bashrc" ;# private bashrc in box
		puts $fd "\[\[ -f $::dst_box/$cb_bashrc ]] &&\
			alias box='cd $::dst_box;\
			set -x; . $cb_bashrc; set +x; cd /tmp'"
	}

	# list alias and env defined by vlogin
	puts $fd "\nalias; env | grep -i vlogin\n"

	puts $fd "#\n$s0\n# EOF\n$s0\n#" ;# tail

	close $fd
}

#
# init your bash on your Solaris or Linux
#
proc bash_init {user} {
	set bashrc "$::dst_bashrc"
	set tmpdir "$::dst_tmpdir"

	#
	# NOTE: too many send may not be finished !!!
	#       so, the less send, the better
	#
	send "exec bash\r"
	send "set -x; . $bashrc; set +x\r" ;# your bashrc must be harmless
	send "ls -l $tmpdir\rcd /tmp\r\r\r"
}

#
# print step msg with simple line between
#
proc print_step {s} {
	set line [str_cxn {-} 100]
	puts "$line\n$s\n$line"
}

proc usage {p} {
	# header
	set tab "[str_cxn " " 8]"
	set l1 "[str_cxn {*} 80]"
	set l2 "* [strM " " 76 "$::g_desc"] *"
	set l3 "* [strM " " 76 "$::g_name v$::g_vers"] *"
	set l4 "* [str_cxn " " 76] *"
	set l5 "* [strM " " 76 "If bug found, please contact $::g_auth"] *"
	set m1 "* [strL " " 76 "$tab $::g_memo1a"] *"
	set m2 "* [strL " " 76 "$tab$tab $::g_memo1b"] *"
	foreach s [list $l1 $l2 $l3 $l4 $l5 $l1 $m1 $m2 $l1] {
		puts stderr [str2yellow $s]
	}

	# usage and examples
	set k1 [str2blue $::ENV_BASHRC]
	set v1 [str2gray $::DEF_BASHRC]
	set k2 [str2blue $::ENV_BOX]
	set v2 [str2gray $::DEF_BOX]
	set k3 [str2blue $::ENV_ISATTY]
	set v3 [str2gray NO]
	puts stderr ""
	puts stderr "Usage: $p <host> \[<user> <password>]"
	puts stderr "[str_cxn "-" 80]"
	puts stderr "NOTE:  default user is $::DEFAULT_USER"
	puts stderr "       default password is in {$::DEFAULT_PASSWORDS}"
	puts stderr ""
	puts stderr "       If you prefer your private bashrc,\
			please make sure it is harmless first"
	puts stderr "       then setenv $k1"
	puts stderr "       e.g: export $k1=$v1"
	puts stderr "       If you have a box with handy files/tools,\
			please setenv $k2"
	puts stderr "       e.g: export $k2=$v2"
	puts stderr "       If you prefer plain text output,\
			please setenv $k3"
	puts stderr "       e.g: export $k3=$v3"
	puts stderr "[str_cxn "-" 80]"
	puts stderr "Examples:"
	puts stderr "       $p ibswitch1"
	puts stderr "       $p ibswitch2 root CHANGEME"
	puts stderr "       $p sunhost01 tet  TET12345"
	puts stderr ""
}

################################################################################
# main()
################################################################################

# init default isatty if user does not set it
if {[getenv $ENV_ISATTY] == ""} {
	setenv $ENV_ISATTY $DEF_ISATTY
}

# add default user/passwords if user does not provide user/password
lappend argv $DEFAULT_USER $DEFAULT_PASSWORDS
set argc [llength $argv]
if {$argc < 3} {
	usage $argv0
	exit 1
}

set host [lindex $argv 0]
set user [lindex $argv 1]
set pwds [lindex $argv 2]

set timeout $DEF_TIMEOUT

#
# 1. validate ssh $host with $user and $pwds
#
print_step "1. Now start to validate ssh [str2blue $host] via\
	[str2yellow $user] with password(s) [str2gray $pwds]"
set flag $B_FALSE
set password ""
foreach password [split $pwds] {
	puts "*** Try password [str2gray $password] ***"
	#
	# NOTE: use '-F /dev/null' to avoid hang on exit
	# if you have private ssh config
	#
	spawn ssh -o StrictHostKeyChecking=no \
		-o UserKnownHostsFile=/dev/null \
		-F /dev/null $user@$host true
	expect {
		-nocase "password: " {
			sleep 0.1
			send "$password\r"
			exp_continue
		}

		"Connection refused" {
			msg_fail "*** sshd not running?"
			exit 1
		}

		timeout {
			msg_fail "*** Time out"
			exit 1
		}

		eof {
			catch wait result
			set ret [lindex $result 3]
			if {$ret == 0 } {
				msg_info "password of $user is $password"
				set flag $B_TRUE
				break
			}
		}
	}
}

if {$flag == $B_FALSE} {
	msg_fail "validate ssh $host via user $user with password $pwds"
	exit 1
}

#
# 2. start to scp vlogin/bashrc/[box] to $host
#
set s1 [exec bash -c "id -un"]
set s2 [format "%X" [clock seconds]][format "%04X" [random 0x0001 0xFFFF]]
set stamp "$s1.$s2"

# create a tmpdir saving vlogin/bashrc
set src_tmpdir "/tmp/$stamp"
set dst_tmpdir "/tmp/$stamp"
if {[catch {file mkdir $src_tmpdir}]} {
	msg_fail "file mkdir $src_tmpdir"
	exit 1
}

# copy vlogin to tmpdir
set src_vlogin "/tmp/$stamp/vlogin"
set dst_vlogin $src_vlogin
file copy -force $argv0 $src_vlogin

# copy user's box to tmpdir
set src_box ""
set dst_box $src_box
set env_box [getenv $ENV_BOX]
if {$env_box != "" && [file exists $env_box]} {
	set boxname "[lindex [split $env_box /] end]"
	set src_box "/tmp/$stamp/$boxname"
	set dst_box $src_box

	file copy -force $env_box $src_box
	msg_info "$ENV_BOX=$env_box"
}

# copy bashrc to tmpdir
set src_bashrc "/tmp/$stamp/bashrc"
set dst_bashrc $src_bashrc
set env_bashrc [getenv $ENV_BASHRC]
if {$env_bashrc != "" && [file exists $env_bashrc]} {
	file copy -force $env_bashrc $src_bashrc
	msg_info "$ENV_BASHRC=$env_bashrc"
}

# add extra alias or env for vlogin itself
bashrc_extra $src_bashrc

set src "$src_tmpdir"
set dst "$user@$host:$dst_tmpdir"
set s_src [str2yellow "$src"]
set s_dst [str2blue "$dst"]
set s_password [str2gray $password]
print_step "2. Now start to scp $s_src to $s_dst with password $s_password"
set flag $B_TRUE
eval spawn scp -o StrictHostKeyChecking=no \
	-o UserKnownHostsFile=/dev/null \
	-F /dev/null -r $src $dst
expect {
	-nocase "password: " {
		sleep 0.1
		send "$password\r"
		exp_continue
	}

	timeout {
		msg_fail "*** Time out"
		exit 1
	}

	eof {
		catch wait result
		set ret [lindex $result 3]
		if {$ret != 0 } {
			msg_fail "failed to scp $src $dst"
			set flag $B_FALSE
		} else {
			msg_pass "succeed to scp $src $dst"
		}
	}
}

file delete -force $src_tmpdir ;# remove the tmpdir
if {$flag != $B_TRUE} {
	exit 1
}

#
# 3. start to ssh $host via $user with $password
#
set s_host [str2blue $host]
set s_user [str2yellow $user]
set s_password [str2gray $password]
print_step "3. Now start to ssh $s_host via $s_user with password $s_password"
spawn ssh -o StrictHostKeyChecking=no \
	-o UserKnownHostsFile=/dev/null \
	-F /dev/null -l $user $host
expect {
	-nocase "password: " {
		sleep 0.1
		send "$password\r"
		exp_continue
	}

	"Connection refused" {
		msg_fail "*** sshd not running?"
		exit 1
	}

	-re "\\\$|]|#|>|% " {
		bash_init $user
		interact
	}

	timeout {
		msg_fail "*** Time out"
		exit 1
	}

	eof {
		exit 0
	}
}

################################################################################
# EOF
